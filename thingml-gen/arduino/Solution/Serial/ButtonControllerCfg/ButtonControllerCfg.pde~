
/***************************************************************************** 
 * File generated from ThingML (Do not edit this file) 
 *****************************************************************************/


/*****************************************************************************
 * Definition of simple types and enumerations
 *****************************************************************************/

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

/*****************************************************************************
 * Headers for type : ButtonController
 *****************************************************************************/


// BEGIN: Code from the c_header annotation ButtonController
#include <../../../lib/ArduinoSerialForward.h>
// END: Code from the c_header annotation ButtonController

// Definition of the instance stuct:
struct ButtonController_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int ButtonController_LEDControllerChart_State;
// Variables for the properties of the instance
uint8_t ButtonController_Buttonpin__var;
uint8_t ButtonController_ButtonIsPressed__var;
uint8_t ButtonController_LEDON__var;
};

// Declaration of prototypes outgoing messages:
void ButtonController_LEDControllerChart_OnEntry(int state, struct ButtonController_Instance *_instance);
void ButtonController_handle_arduino_100ms_interrupt(struct ButtonController_Instance *_instance);
void ButtonController_handle_arduino_readDigitalResponse(struct ButtonController_Instance *_instance, uint8_t pin, uint8_t DigitalState);
void ButtonController_handle_LEDport_LEDControllerReady(struct ButtonController_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_ButtonController_send_LEDport_LEDON_listener(void (*_listener)(struct ButtonController_Instance*));
void register_ButtonController_send_LEDport_LEDOFF_listener(void (*_listener)(struct ButtonController_Instance*));
void register_ButtonController_send_arduino_timer_start_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t, int16_t));
void register_ButtonController_send_arduino_timer_cancel_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_serial_print_str_listener(void (*_listener)(struct ButtonController_Instance*, char *));
void register_ButtonController_send_arduino_serial_print_dec_listener(void (*_listener)(struct ButtonController_Instance*, double));
void register_ButtonController_send_arduino_serial_print_num_listener(void (*_listener)(struct ButtonController_Instance*, int16_t));
void register_ButtonController_send_arduino_usb_print_str_listener(void (*_listener)(struct ButtonController_Instance*, char *));
void register_ButtonController_send_arduino_usb_print_dec_listener(void (*_listener)(struct ButtonController_Instance*, double));
void register_ButtonController_send_arduino_usb_print_num_listener(void (*_listener)(struct ButtonController_Instance*, int16_t));
void register_ButtonController_send_arduino_setDigitalHigh_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_setDigitalLow_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_setOutput_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_setInput_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_readDigital_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));
void register_ButtonController_send_arduino_readAnalog_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t));

// Definition of the states:
#define BUTTONCONTROLLER_LEDCONTROLLERCHART_STATE 0
#define BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE 1
#define BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE 2

/*****************************************************************************
 * Implementation for type : ButtonController
 *****************************************************************************/

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void ButtonController_LEDControllerChart_OnExit(int state, struct ButtonController_Instance *_instance);
void ButtonController_send_LEDport_LEDON(struct ButtonController_Instance *_instance);
void ButtonController_send_LEDport_LEDOFF(struct ButtonController_Instance *_instance);
void ButtonController_send_arduino_timer_start(struct ButtonController_Instance *_instance, uint8_t id, int16_t time);
void ButtonController_send_arduino_timer_cancel(struct ButtonController_Instance *_instance, uint8_t id);
void ButtonController_send_arduino_serial_print_str(struct ButtonController_Instance *_instance, char * msg);
void ButtonController_send_arduino_serial_print_dec(struct ButtonController_Instance *_instance, double num);
void ButtonController_send_arduino_serial_print_num(struct ButtonController_Instance *_instance, int16_t num);
void ButtonController_send_arduino_usb_print_str(struct ButtonController_Instance *_instance, char * msg);
void ButtonController_send_arduino_usb_print_dec(struct ButtonController_Instance *_instance, double num);
void ButtonController_send_arduino_usb_print_num(struct ButtonController_Instance *_instance, int16_t num);
void ButtonController_send_arduino_setDigitalHigh(struct ButtonController_Instance *_instance, uint8_t pin);
void ButtonController_send_arduino_setDigitalLow(struct ButtonController_Instance *_instance, uint8_t pin);
void ButtonController_send_arduino_setOutput(struct ButtonController_Instance *_instance, uint8_t pin);
void ButtonController_send_arduino_setInput(struct ButtonController_Instance *_instance, uint8_t pin);
void ButtonController_send_arduino_readDigital(struct ButtonController_Instance *_instance, uint8_t pin);
void ButtonController_send_arduino_readAnalog(struct ButtonController_Instance *_instance, uint8_t pin);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void ButtonController_LEDControllerChart_OnEntry(int state, struct ButtonController_Instance *_instance) {
switch(state) {
case BUTTONCONTROLLER_LEDCONTROLLERCHART_STATE:
_instance->ButtonController_LEDControllerChart_State = BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE;
ButtonController_LEDControllerChart_OnEntry(_instance->ButtonController_LEDControllerChart_State, _instance);
break;
case BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE:
break;
case BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE:
break;
default: break;
}
}

// On Exit Actions:
void ButtonController_LEDControllerChart_OnExit(int state, struct ButtonController_Instance *_instance) {
switch(state) {
case BUTTONCONTROLLER_LEDCONTROLLERCHART_STATE:
ButtonController_LEDControllerChart_OnExit(_instance->ButtonController_LEDControllerChart_State, _instance);
break;
case BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE:
break;
case BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void ButtonController_handle_arduino_100ms_interrupt(struct ButtonController_Instance *_instance) {
uint8_t ButtonController_LEDControllerChart_State_event_consumed = 0;
if (_instance->ButtonController_LEDControllerChart_State == BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE) {
if (ButtonController_LEDControllerChart_State_event_consumed == 0 && 1) {
{
ButtonController_send_arduino_readDigital(_instance, _instance->ButtonController_Buttonpin__var);
}
ButtonController_LEDControllerChart_State_event_consumed = 1;
}
}
}
void ButtonController_handle_arduino_readDigitalResponse(struct ButtonController_Instance *_instance, uint8_t pin, uint8_t DigitalState) {
uint8_t ButtonController_LEDControllerChart_State_event_consumed = 0;
if (_instance->ButtonController_LEDControllerChart_State == BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE) {
if (ButtonController_LEDControllerChart_State_event_consumed == 0 && 1) {
{
if(( !(_instance->ButtonController_ButtonIsPressed__var)) && (DigitalState == DIGITALSTATE_HIGH)) {
_instance->ButtonController_ButtonIsPressed__var = 1;
if(_instance->ButtonController_LEDON__var) {
ButtonController_send_LEDport_LEDOFF(_instance);
Serial.println("[Controller] LEDOFF");
}
if( !(_instance->ButtonController_LEDON__var)) {
ButtonController_send_LEDport_LEDON(_instance);
Serial.println("[Controller] LEDON");
}
_instance->ButtonController_LEDON__var =  !(_instance->ButtonController_LEDON__var);
}
if(DigitalState == DIGITALSTATE_LOW) {
_instance->ButtonController_ButtonIsPressed__var = 0;
}
}
ButtonController_LEDControllerChart_State_event_consumed = 1;
}
}
}
void ButtonController_handle_LEDport_LEDControllerReady(struct ButtonController_Instance *_instance) {
uint8_t ButtonController_LEDControllerChart_State_event_consumed = 0;
if (_instance->ButtonController_LEDControllerChart_State == BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE) {
if (ButtonController_LEDControllerChart_State_event_consumed == 0 && 1) {
ButtonController_LEDControllerChart_OnExit(BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE, _instance);
_instance->ButtonController_LEDControllerChart_State = BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE;
{
ButtonController_send_arduino_setInput(_instance, _instance->ButtonController_Buttonpin__var);
Serial.println("[Controller] Init");
}
ButtonController_LEDControllerChart_OnEntry(BUTTONCONTROLLER_LEDCONTROLLERCHART_IDLE_STATE, _instance);
ButtonController_LEDControllerChart_State_event_consumed = 1;
}
}
}

// Observers for outgoing messages:
void (*ButtonController_send_LEDport_LEDON_listener)(struct ButtonController_Instance*)= 0x0;
void register_ButtonController_send_LEDport_LEDON_listener(void (*_listener)(struct ButtonController_Instance*)){
ButtonController_send_LEDport_LEDON_listener = _listener;
}
void ButtonController_send_LEDport_LEDON(struct ButtonController_Instance *_instance){
if (ButtonController_send_LEDport_LEDON_listener != 0x0) ButtonController_send_LEDport_LEDON_listener(_instance);
}
void (*ButtonController_send_LEDport_LEDOFF_listener)(struct ButtonController_Instance*)= 0x0;
void register_ButtonController_send_LEDport_LEDOFF_listener(void (*_listener)(struct ButtonController_Instance*)){
ButtonController_send_LEDport_LEDOFF_listener = _listener;
}
void ButtonController_send_LEDport_LEDOFF(struct ButtonController_Instance *_instance){
if (ButtonController_send_LEDport_LEDOFF_listener != 0x0) ButtonController_send_LEDport_LEDOFF_listener(_instance);
}
void (*ButtonController_send_arduino_timer_start_listener)(struct ButtonController_Instance*, uint8_t, int16_t)= 0x0;
void register_ButtonController_send_arduino_timer_start_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t, int16_t)){
ButtonController_send_arduino_timer_start_listener = _listener;
}
void ButtonController_send_arduino_timer_start(struct ButtonController_Instance *_instance, uint8_t id, int16_t time){
if (ButtonController_send_arduino_timer_start_listener != 0x0) ButtonController_send_arduino_timer_start_listener(_instance, id, time);
}
void (*ButtonController_send_arduino_timer_cancel_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_timer_cancel_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_timer_cancel_listener = _listener;
}
void ButtonController_send_arduino_timer_cancel(struct ButtonController_Instance *_instance, uint8_t id){
if (ButtonController_send_arduino_timer_cancel_listener != 0x0) ButtonController_send_arduino_timer_cancel_listener(_instance, id);
}
void (*ButtonController_send_arduino_serial_print_str_listener)(struct ButtonController_Instance*, char *)= 0x0;
void register_ButtonController_send_arduino_serial_print_str_listener(void (*_listener)(struct ButtonController_Instance*, char *)){
ButtonController_send_arduino_serial_print_str_listener = _listener;
}
void ButtonController_send_arduino_serial_print_str(struct ButtonController_Instance *_instance, char * msg){
if (ButtonController_send_arduino_serial_print_str_listener != 0x0) ButtonController_send_arduino_serial_print_str_listener(_instance, msg);
}
void (*ButtonController_send_arduino_serial_print_dec_listener)(struct ButtonController_Instance*, double)= 0x0;
void register_ButtonController_send_arduino_serial_print_dec_listener(void (*_listener)(struct ButtonController_Instance*, double)){
ButtonController_send_arduino_serial_print_dec_listener = _listener;
}
void ButtonController_send_arduino_serial_print_dec(struct ButtonController_Instance *_instance, double num){
if (ButtonController_send_arduino_serial_print_dec_listener != 0x0) ButtonController_send_arduino_serial_print_dec_listener(_instance, num);
}
void (*ButtonController_send_arduino_serial_print_num_listener)(struct ButtonController_Instance*, int16_t)= 0x0;
void register_ButtonController_send_arduino_serial_print_num_listener(void (*_listener)(struct ButtonController_Instance*, int16_t)){
ButtonController_send_arduino_serial_print_num_listener = _listener;
}
void ButtonController_send_arduino_serial_print_num(struct ButtonController_Instance *_instance, int16_t num){
if (ButtonController_send_arduino_serial_print_num_listener != 0x0) ButtonController_send_arduino_serial_print_num_listener(_instance, num);
}
void (*ButtonController_send_arduino_usb_print_str_listener)(struct ButtonController_Instance*, char *)= 0x0;
void register_ButtonController_send_arduino_usb_print_str_listener(void (*_listener)(struct ButtonController_Instance*, char *)){
ButtonController_send_arduino_usb_print_str_listener = _listener;
}
void ButtonController_send_arduino_usb_print_str(struct ButtonController_Instance *_instance, char * msg){
if (ButtonController_send_arduino_usb_print_str_listener != 0x0) ButtonController_send_arduino_usb_print_str_listener(_instance, msg);
}
void (*ButtonController_send_arduino_usb_print_dec_listener)(struct ButtonController_Instance*, double)= 0x0;
void register_ButtonController_send_arduino_usb_print_dec_listener(void (*_listener)(struct ButtonController_Instance*, double)){
ButtonController_send_arduino_usb_print_dec_listener = _listener;
}
void ButtonController_send_arduino_usb_print_dec(struct ButtonController_Instance *_instance, double num){
if (ButtonController_send_arduino_usb_print_dec_listener != 0x0) ButtonController_send_arduino_usb_print_dec_listener(_instance, num);
}
void (*ButtonController_send_arduino_usb_print_num_listener)(struct ButtonController_Instance*, int16_t)= 0x0;
void register_ButtonController_send_arduino_usb_print_num_listener(void (*_listener)(struct ButtonController_Instance*, int16_t)){
ButtonController_send_arduino_usb_print_num_listener = _listener;
}
void ButtonController_send_arduino_usb_print_num(struct ButtonController_Instance *_instance, int16_t num){
if (ButtonController_send_arduino_usb_print_num_listener != 0x0) ButtonController_send_arduino_usb_print_num_listener(_instance, num);
}
void (*ButtonController_send_arduino_setDigitalHigh_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_setDigitalHigh_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_setDigitalHigh_listener = _listener;
}
void ButtonController_send_arduino_setDigitalHigh(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_setDigitalHigh_listener != 0x0) ButtonController_send_arduino_setDigitalHigh_listener(_instance, pin);
}
void (*ButtonController_send_arduino_setDigitalLow_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_setDigitalLow_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_setDigitalLow_listener = _listener;
}
void ButtonController_send_arduino_setDigitalLow(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_setDigitalLow_listener != 0x0) ButtonController_send_arduino_setDigitalLow_listener(_instance, pin);
}
void (*ButtonController_send_arduino_setOutput_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_setOutput_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_setOutput_listener = _listener;
}
void ButtonController_send_arduino_setOutput(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_setOutput_listener != 0x0) ButtonController_send_arduino_setOutput_listener(_instance, pin);
}
void (*ButtonController_send_arduino_setInput_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_setInput_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_setInput_listener = _listener;
}
void ButtonController_send_arduino_setInput(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_setInput_listener != 0x0) ButtonController_send_arduino_setInput_listener(_instance, pin);
}
void (*ButtonController_send_arduino_readDigital_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_readDigital_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_readDigital_listener = _listener;
}
void ButtonController_send_arduino_readDigital(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_readDigital_listener != 0x0) ButtonController_send_arduino_readDigital_listener(_instance, pin);
}
void (*ButtonController_send_arduino_readAnalog_listener)(struct ButtonController_Instance*, uint8_t)= 0x0;
void register_ButtonController_send_arduino_readAnalog_listener(void (*_listener)(struct ButtonController_Instance*, uint8_t)){
ButtonController_send_arduino_readAnalog_listener = _listener;
}
void ButtonController_send_arduino_readAnalog(struct ButtonController_Instance *_instance, uint8_t pin){
if (ButtonController_send_arduino_readAnalog_listener != 0x0) ButtonController_send_arduino_readAnalog_listener(_instance, pin);
}

/*****************************************************************************
 * Headers for type : VirtualPort
 *****************************************************************************/

// Definition of the instance stuct:
struct VirtualPort_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int VirtualPort_EmptyChart_State;
// Variables for the properties of the instance
};

// Declaration of prototypes outgoing messages:
void VirtualPort_EmptyChart_OnEntry(int state, struct VirtualPort_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_VirtualPort_send_LEDport_LEDControllerReady_listener(void (*_listener)(struct VirtualPort_Instance*));

// Definition of the states:
#define VIRTUALPORT_EMPTYCHART_STATE 0
#define VIRTUALPORT_EMPTYCHART_EMPTY_STATE 1

/*****************************************************************************
 * Implementation for type : VirtualPort
 *****************************************************************************/

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void VirtualPort_EmptyChart_OnExit(int state, struct VirtualPort_Instance *_instance);
void VirtualPort_send_LEDport_LEDControllerReady(struct VirtualPort_Instance *_instance);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void VirtualPort_EmptyChart_OnEntry(int state, struct VirtualPort_Instance *_instance) {
switch(state) {
case VIRTUALPORT_EMPTYCHART_STATE:
_instance->VirtualPort_EmptyChart_State = VIRTUALPORT_EMPTYCHART_EMPTY_STATE;
VirtualPort_EmptyChart_OnEntry(_instance->VirtualPort_EmptyChart_State, _instance);
break;
case VIRTUALPORT_EMPTYCHART_EMPTY_STATE:
break;
default: break;
}
}

// On Exit Actions:
void VirtualPort_EmptyChart_OnExit(int state, struct VirtualPort_Instance *_instance) {
switch(state) {
case VIRTUALPORT_EMPTYCHART_STATE:
VirtualPort_EmptyChart_OnExit(_instance->VirtualPort_EmptyChart_State, _instance);
break;
case VIRTUALPORT_EMPTYCHART_EMPTY_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:

// Observers for outgoing messages:
void (*VirtualPort_send_LEDport_LEDControllerReady_listener)(struct VirtualPort_Instance*)= 0x0;
void register_VirtualPort_send_LEDport_LEDControllerReady_listener(void (*_listener)(struct VirtualPort_Instance*)){
VirtualPort_send_LEDport_LEDControllerReady_listener = _listener;
}
void VirtualPort_send_LEDport_LEDControllerReady(struct VirtualPort_Instance *_instance){
if (VirtualPort_send_LEDport_LEDControllerReady_listener != 0x0) VirtualPort_send_LEDport_LEDControllerReady_listener(_instance);
}

/*****************************************************************************
 * Headers for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_header annotation ArduinoScheduler

#define NB_SOFT_TIMERS 4 // for 4 different timers, 0 to 3. change here to get more or less timers.

// END: Code from the c_header annotation ArduinoScheduler

// Definition of the instance stuct:
struct ArduinoScheduler_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int ArduinoScheduler_ArduinoSchedulerStateChart_State;
// Variables for the properties of the instance
uint8_t ArduinoScheduler_interrupt_counter__var;
long ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[NB_SOFT_TIMERS];
long ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var;
};

// Declaration of prototypes outgoing messages:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time);
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
// Declaration of callbacks for incomming messages:
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t));
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t));
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int));

// Definition of the states:
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE 0
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE 1

/*****************************************************************************
 * Implementation for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_global annotation ArduinoScheduler

struct ArduinoScheduler_Instance *_ArduinoScheduler_instance;
uint8_t interrupt_counter = 0;

// END: Code from the c_global annotation ArduinoScheduler

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState);
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res);
void f_ArduinoScheduler_initialize_timer2(struct ArduinoScheduler_Instance *_instance);
SIGNAL(TIMER2_OVF_vect);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:
// Definition of function initialize_timer2
void f_ArduinoScheduler_initialize_timer2(struct ArduinoScheduler_Instance *_instance) {
{
// Store the instance in a global variable so that the interrupt routine can use it
		_ArduinoScheduler_instance = _instance;
		
		// Run timer2 interrupt up counting at 250kHz 
		 TCCR2A = 0;
		 TCCR2B = 1<<CS22 | 0<<CS21 | 0<<CS20;
		
		 //Timer2 Overflow Interrupt Enable
		 TIMSK2 |= 1<<TOIE2;
		
}
}

// Definition of function timer2_overflow_interrupt
SIGNAL(TIMER2_OVF_vect) {
{
TCNT2 = 5; // Leave 250 tics until overflow (1 overflow every 1ms)
interrupt_counter++;
if(interrupt_counter >= 99) {
ArduinoScheduler_send_arduino_100ms_interrupt(_ArduinoScheduler_instance);
interrupt_counter=0;
}
if(interrupt_counter % 4) {
ArduinoScheduler_send_arduino_4ms_interrupt(_ArduinoScheduler_instance);
}
}
}


// On Entry Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
{
Serial.begin(9600);
}
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// On Exit Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
long tms = millis();
uint8_t t = 0;
while(t < NB_SOFT_TIMERS) {
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] > 0 && _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] = 0;
ArduinoScheduler_send_arduino_timeout(_instance, t);
}
t = t + 1;
}
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = _instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var + 1000;
ArduinoScheduler_send_arduino_1s_poll(_instance);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
f_ArduinoScheduler_initialize_timer2(_instance);
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = millis() + 1000;
ArduinoScheduler_send_arduino_ready(_instance);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
ArduinoScheduler_send_arduino_readAnalogResponse(_instance, pin, analogRead(pin));
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if((digitalRead(pin) == HIGH)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_HIGH);
}
if((digitalRead(pin) == LOW)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_LOW);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,INPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,OUTPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, HIGH);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = 0;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, LOW);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = millis() + time - 1;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}

// Observers for outgoing messages:
void (*ArduinoScheduler_send_arduino_ready_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_ready_listener = _listener;
}
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_ready_listener != 0x0) ArduinoScheduler_send_arduino_ready_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_4ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_4ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_4ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_4ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_100ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_100ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_100ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_100ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_1s_poll_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_1s_poll_listener = _listener;
}
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_1s_poll_listener != 0x0) ArduinoScheduler_send_arduino_1s_poll_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_timeout_listener)(struct ArduinoScheduler_Instance*, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t)){
ArduinoScheduler_send_arduino_timeout_listener = _listener;
}
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (ArduinoScheduler_send_arduino_timeout_listener != 0x0) ArduinoScheduler_send_arduino_timeout_listener(_instance, id);
}
void (*ArduinoScheduler_send_arduino_serial_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_serial_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_serial_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_serial_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_usb_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_usb_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_usb_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_usb_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_readDigitalResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)){
ArduinoScheduler_send_arduino_readDigitalResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (ArduinoScheduler_send_arduino_readDigitalResponse_listener != 0x0) ArduinoScheduler_send_arduino_readDigitalResponse_listener(_instance, pin, DigitalState);
}
void (*ArduinoScheduler_send_arduino_readAnalogResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)= 0x0;
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)){
ArduinoScheduler_send_arduino_readAnalogResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (ArduinoScheduler_send_arduino_readAnalogResponse_listener != 0x0) ArduinoScheduler_send_arduino_readAnalogResponse_listener(_instance, pin, res);
}


/*****************************************************************************
 * Definitions for configuration : ButtonControllerCfg
 *****************************************************************************/

#define MAX_INSTANCES 32
#define FIFO_SIZE 256

/*********************************
 * Instance IDs and lookup
 *********************************/

void * instances[MAX_INSTANCES];
uint16_t instances_count = 0;

void * instance_by_id(uint16_t id) {
  return instances[id];
}

uint16_t add_instance(void * instance_struct) {
  instances[instances_count] = instance_struct;
  return instances_count++;
}

/******************************************
 * Simple byte FIFO implementation
 ******************************************/

byte fifo[FIFO_SIZE];
int fifo_head = 0;
int fifo_tail = 0;

// Returns the number of byte currently in the fifo
int fifo_byte_length() {
  if (fifo_tail >= fifo_head)
    return fifo_tail - fifo_head;
  return fifo_tail + FIFO_SIZE - fifo_head;
}

// Returns the number of bytes currently available in the fifo
int fifo_byte_available() {
  return FIFO_SIZE - 1 - fifo_byte_length();
}

// Returns true if the fifo is empty
int fifo_empty() {
  return fifo_head == fifo_tail;
}

// Return true if the fifo is full
int fifo_full() {
  return fifo_head == ((fifo_tail + 1) % FIFO_SIZE);
}

// Enqueue 1 byte in the fifo if there is space
// returns 1 for sucess and 0 if the fifo was full
int fifo_enqueue(byte b) {
  int new_tail = (fifo_tail + 1) % FIFO_SIZE;
  if (new_tail == fifo_head) return 0; // the fifo is full
  fifo[fifo_tail] = b;
  fifo_tail = new_tail;
  return 1;
}

// Enqueue 1 byte in the fifo without checking for available space
// The caller should have checked that there is enough space
int _fifo_enqueue(byte b) {
  fifo[fifo_tail] = b;
  fifo_tail = (fifo_tail + 1) % FIFO_SIZE;
}

// Dequeue 1 byte in the fifo.
// The caller should check that the fifo is not empty
byte fifo_dequeue() {
  if (!fifo_empty()) {
    byte result = fifo[fifo_head];
    fifo_head = (fifo_head + 1) % FIFO_SIZE;
    return result;
  }
  return 0;
}

/*
void _fifo_enqueue_ptr(void * ptr) {
  int i;
  ptr_union_t proxy;
  proxy.pointer = ptr;
  for (i = 0; i<PTR_MAX_SIZE; i++) _fifo_enqueue(proxy.buffer[i]);
}

void * _fifo_dequeue_ptr() {
  int i;
  ptr_union_t proxy;
  for (i = 0; i<PTR_MAX_SIZE; i++) proxy.buffer[i] = _fifo_dequeue();
  return proxy.pointer;
}
*/
//Declaration of instance variables
struct ArduinoScheduler_Instance ButtonControllerCfg_a_var;
struct ButtonController_Instance ButtonControllerCfg_bc_var;
struct VirtualPort_Instance ButtonControllerCfg_vp_var;

// Enqueue of messages ButtonController::LEDport::LEDOFF
void enqueue_ButtonController_send_LEDport_LEDOFF(struct ButtonController_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (1 >> 8) & 0xFF );
_fifo_enqueue( 1 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages ButtonController::LEDport::LEDON
void enqueue_ButtonController_send_LEDport_LEDON(struct ButtonController_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (2 >> 8) & 0xFF );
_fifo_enqueue( 2 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages VirtualPort::LEDport::LEDControllerReady
void enqueue_VirtualPort_send_LEDport_LEDControllerReady(struct VirtualPort_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (3 >> 8) & 0xFF );
_fifo_enqueue( 3 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}

// Dispatch for messages VirtualPort::LEDport::LEDControllerReady
void dispatch_VirtualPort_send_LEDport_LEDControllerReady(struct VirtualPort_Instance *_instance){
if (_instance == &ButtonControllerCfg_vp_var) {
ButtonController_handle_LEDport_LEDControllerReady(&ButtonControllerCfg_bc_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::100ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &ButtonControllerCfg_a_var) {
ButtonController_handle_arduino_100ms_interrupt(&ButtonControllerCfg_bc_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::readAnalogResponse
void dispatch_ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::ready
void dispatch_ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::1s_poll
void dispatch_ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::serial_rx_char
void dispatch_ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::readDigitalResponse
void dispatch_ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (_instance == &ButtonControllerCfg_a_var) {
ButtonController_handle_arduino_readDigitalResponse(&ButtonControllerCfg_bc_var, pin, DigitalState);
}
}
// Dispatch for messages ArduinoScheduler::arduino::timeout
void dispatch_ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::usb_rx_char
void dispatch_ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::4ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &ButtonControllerCfg_a_var) {
}
}
// Dispatch for messages ButtonController::LEDport::LEDOFF
void dispatch_ButtonController_send_LEDport_LEDOFF(struct ButtonController_Instance *_instance){
if (_instance == &ButtonControllerCfg_bc_var) {
}
}
// Dispatch for messages ButtonController::LEDport::LEDON
void dispatch_ButtonController_send_LEDport_LEDON(struct ButtonController_Instance *_instance){
if (_instance == &ButtonControllerCfg_bc_var) {
}
}
// Dispatch for messages ButtonController::arduino::readAnalog
void dispatch_ButtonController_send_arduino_readAnalog(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_readAnalog(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::serial_print_dec
void dispatch_ButtonController_send_arduino_serial_print_dec(struct ButtonController_Instance *_instance, double num){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_serial_print_dec(&ButtonControllerCfg_a_var, num);
}
}
// Dispatch for messages ButtonController::arduino::readDigital
void dispatch_ButtonController_send_arduino_readDigital(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_readDigital(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::setInput
void dispatch_ButtonController_send_arduino_setInput(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_setInput(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::setOutput
void dispatch_ButtonController_send_arduino_setOutput(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_setOutput(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::serial_print_num
void dispatch_ButtonController_send_arduino_serial_print_num(struct ButtonController_Instance *_instance, int16_t num){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_serial_print_num(&ButtonControllerCfg_a_var, num);
}
}
// Dispatch for messages ButtonController::arduino::usb_print_dec
void dispatch_ButtonController_send_arduino_usb_print_dec(struct ButtonController_Instance *_instance, double num){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_usb_print_dec(&ButtonControllerCfg_a_var, num);
}
}
// Dispatch for messages ButtonController::arduino::setDigitalHigh
void dispatch_ButtonController_send_arduino_setDigitalHigh(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_setDigitalHigh(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::timer_cancel
void dispatch_ButtonController_send_arduino_timer_cancel(struct ButtonController_Instance *_instance, uint8_t id){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_timer_cancel(&ButtonControllerCfg_a_var, id);
}
}
// Dispatch for messages ButtonController::arduino::serial_print_str
void dispatch_ButtonController_send_arduino_serial_print_str(struct ButtonController_Instance *_instance, char * msg){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_serial_print_str(&ButtonControllerCfg_a_var, msg);
}
}
// Dispatch for messages ButtonController::arduino::setDigitalLow
void dispatch_ButtonController_send_arduino_setDigitalLow(struct ButtonController_Instance *_instance, uint8_t pin){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_setDigitalLow(&ButtonControllerCfg_a_var, pin);
}
}
// Dispatch for messages ButtonController::arduino::timer_start
void dispatch_ButtonController_send_arduino_timer_start(struct ButtonController_Instance *_instance, uint8_t id, int16_t time){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_timer_start(&ButtonControllerCfg_a_var, id, time);
}
}
// Dispatch for messages ButtonController::arduino::usb_print_str
void dispatch_ButtonController_send_arduino_usb_print_str(struct ButtonController_Instance *_instance, char * msg){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_usb_print_str(&ButtonControllerCfg_a_var, msg);
}
}
// Dispatch for messages ButtonController::arduino::usb_print_num
void dispatch_ButtonController_send_arduino_usb_print_num(struct ButtonController_Instance *_instance, int16_t num){
if (_instance == &ButtonControllerCfg_bc_var) {
ArduinoScheduler_handle_arduino_usb_print_num(&ButtonControllerCfg_a_var, num);
}
}

void processMessageQueue() {
if (fifo_empty()) return; // return if there is nothing to do

byte mbuf[2];
uint8_t mbufi = 0;

// Read the code of the next port/message in the queue
uint16_t code = fifo_dequeue() << 8;

code += fifo_dequeue();

// Switch to call the appropriate handler
switch(code) {
case 1:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ButtonController_send_LEDport_LEDOFF((struct ButtonController_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 2:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_ButtonController_send_LEDport_LEDON((struct ButtonController_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 3:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_VirtualPort_send_LEDport_LEDControllerReady((struct VirtualPort_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
}
}

void initialize_configuration_ButtonControllerCfg() {
// Initialize connectors
register_VirtualPort_send_LEDport_LEDControllerReady_listener(enqueue_VirtualPort_send_LEDport_LEDControllerReady);
register_ButtonController_send_LEDport_LEDON_listener(enqueue_ButtonController_send_LEDport_LEDON);
register_ButtonController_send_LEDport_LEDOFF_listener(enqueue_ButtonController_send_LEDport_LEDOFF);
register_ButtonController_send_arduino_timer_start_listener(dispatch_ButtonController_send_arduino_timer_start);
register_ButtonController_send_arduino_timer_cancel_listener(dispatch_ButtonController_send_arduino_timer_cancel);
register_ButtonController_send_arduino_serial_print_str_listener(dispatch_ButtonController_send_arduino_serial_print_str);
register_ButtonController_send_arduino_serial_print_dec_listener(dispatch_ButtonController_send_arduino_serial_print_dec);
register_ButtonController_send_arduino_serial_print_num_listener(dispatch_ButtonController_send_arduino_serial_print_num);
register_ButtonController_send_arduino_usb_print_str_listener(dispatch_ButtonController_send_arduino_usb_print_str);
register_ButtonController_send_arduino_usb_print_dec_listener(dispatch_ButtonController_send_arduino_usb_print_dec);
register_ButtonController_send_arduino_usb_print_num_listener(dispatch_ButtonController_send_arduino_usb_print_num);
register_ButtonController_send_arduino_setDigitalHigh_listener(dispatch_ButtonController_send_arduino_setDigitalHigh);
register_ButtonController_send_arduino_setDigitalLow_listener(dispatch_ButtonController_send_arduino_setDigitalLow);
register_ButtonController_send_arduino_setOutput_listener(dispatch_ButtonController_send_arduino_setOutput);
register_ButtonController_send_arduino_setInput_listener(dispatch_ButtonController_send_arduino_setInput);
register_ButtonController_send_arduino_readDigital_listener(dispatch_ButtonController_send_arduino_readDigital);
register_ButtonController_send_arduino_readAnalog_listener(dispatch_ButtonController_send_arduino_readAnalog);
register_ArduinoScheduler_send_arduino_ready_listener(dispatch_ArduinoScheduler_send_arduino_ready);
register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(dispatch_ArduinoScheduler_send_arduino_4ms_interrupt);
register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(dispatch_ArduinoScheduler_send_arduino_100ms_interrupt);
register_ArduinoScheduler_send_arduino_1s_poll_listener(dispatch_ArduinoScheduler_send_arduino_1s_poll);
register_ArduinoScheduler_send_arduino_timeout_listener(dispatch_ArduinoScheduler_send_arduino_timeout);
register_ArduinoScheduler_send_arduino_serial_rx_char_listener(dispatch_ArduinoScheduler_send_arduino_serial_rx_char);
register_ArduinoScheduler_send_arduino_usb_rx_char_listener(dispatch_ArduinoScheduler_send_arduino_usb_rx_char);
register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(dispatch_ArduinoScheduler_send_arduino_readDigitalResponse);
register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(dispatch_ArduinoScheduler_send_arduino_readAnalogResponse);

// Init the ID, state variables and properties for instance ButtonControllerCfg_bc
ButtonControllerCfg_bc_var.id = add_instance( (void*) &ButtonControllerCfg_bc_var);
ButtonControllerCfg_bc_var.ButtonController_LEDControllerChart_State = BUTTONCONTROLLER_LEDCONTROLLERCHART_INIT_STATE;
ButtonControllerCfg_bc_var.ButtonController_Buttonpin__var = 7;
ButtonControllerCfg_bc_var.ButtonController_ButtonIsPressed__var = 0;
ButtonControllerCfg_bc_var.ButtonController_LEDON__var = 0;

// Init the ID, state variables and properties for instance ButtonControllerCfg_a
ButtonControllerCfg_a_var.id = add_instance( (void*) &ButtonControllerCfg_a_var);
ButtonControllerCfg_a_var.ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
ButtonControllerCfg_a_var.ArduinoScheduler_interrupt_counter__var = 0;

// Init the ID, state variables and properties for instance ButtonControllerCfg_vp
ButtonControllerCfg_vp_var.id = add_instance( (void*) &ButtonControllerCfg_vp_var);
ButtonControllerCfg_vp_var.VirtualPort_EmptyChart_State = VIRTUALPORT_EMPTYCHART_EMPTY_STATE;

ButtonController_LEDControllerChart_OnEntry(BUTTONCONTROLLER_LEDCONTROLLERCHART_STATE, &ButtonControllerCfg_bc_var);
VirtualPort_EmptyChart_OnEntry(VIRTUALPORT_EMPTYCHART_STATE, &ButtonControllerCfg_vp_var);
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE, &ButtonControllerCfg_a_var);
}

/*****************************************************************************
 * Main for configuration : ButtonControllerCfg
 *****************************************************************************/

void setup() {
initialize_configuration_ButtonControllerCfg();
ArduinoScheduler_handle_polling_setup(&ButtonControllerCfg_a_var);

}

void loop() {
ArduinoScheduler_handle_polling_poll(&ButtonControllerCfg_a_var);

processMessageQueue();
}